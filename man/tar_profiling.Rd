% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_profiling.R
\name{tar_profiling}
\alias{tar_profiling}
\title{Spectral processing for profiling data}
\usage{
tar_profiling(
  name,
  technique,
  mzML = NULL,
  sample_info = NULL,
  cls = "class",
  parameters = NULL,
  plots = TRUE,
  summary = TRUE,
  exports = TRUE,
  export_path = "exports/spectral_processing"
)
}
\arguments{
\item{name}{Symbol. The name for the collection of targets. This serves as a prefix for target names.}

\item{technique}{The profiling technique to use. Should be one of the values returned by \code{profilePro::availableTechniques()}.}

\item{mzML}{A character vector of mzML data file paths. If \code{NULL}, target input will be expected from an existing target. See details.}

\item{sample_info}{A tibble containing the sample information. See details for the specifications. If \code{NULL}, target input will be expected from an existing target. See details.}

\item{cls}{Sample information column to use for plotting.}

\item{parameters}{S4 object of class \code{ProfileParameters}. If \code{NULL}, default parameters for argument \code{technique} will be used.}

\item{plots}{Boolean. Include additional plotting targets.}

\item{summary}{Boolean. Include additional summary targets.}

\item{exports}{Boolean. Include additional export targets.}

\item{export_path}{Destination path of export files. Ignored if argument \code{exports = FALSE}.}
}
\value{
A list of target objects for processing \code{mzML} data files using \code{profilePro}.
}
\description{
Targets for spectral processing of profiling data.
}
\details{
Specifying arguments \code{mzML} and \code{sample_info} as \code{NULL} enables the use of one of the data file and sample information from one of the input target factories, \code{tar_input_file_path()}, \code{tar_input_grover()} or \code{tar_input_piggyback()}. See the example using \code{tar_input_piggyback()} below.
}
\examples{
\dontrun{
## Perform profiling processing by specifying the file paths and sample information directly
targets::tar_dir({
    targets::tar_script({
        library(hrmtargets)
        file_paths <- metaboData::filePaths('RP-UHPLC-HRMS','BdistachyonEcotypes',
                                            ask = FALSE)
        sample_info <- metaboData::runinfo('RP-UHPLC-HRMS','BdistachyonEcotypes',
                                           ask = FALSE)
        
        list(
            tar_profiling(example,
                          technique = 'LCMS-RP',
                          mzML = file_paths,
                          sample_info = sample_info)
        )
    })
    targets::tar_make()
    targets::tar_read(example_results_spectral_processing)
    targets::tar_read(example_plot_chromatogram)
})

## Perform spectral binning by using tar_input_piggyback() 
targets::tar_dir({
    targets::tar_script({
        name <- rlang::sym('example')
        library(hrmtargets)
        file_paths <- metaboData::filePaths('RP-UHPLC-HRMS','BdistachyonEcotypes',
                                            ask = FALSE)
        sample_info <- metaboData::runinfo('RP-UHPLC-HRMS','BdistachyonEcotypes',
                                           ask = FALSE)

        list(
            tar_input_file_path(!!name,
                                file_paths,
                                sample_info),
            tar_profiling(!!name,
                          'LCMS-RP')
        )
   })
   targets::tar_make()
   targets::tar_read(example_results_spectral_processing)
   targets::tar_read(example_plot_chromatogram)
})
}
}
